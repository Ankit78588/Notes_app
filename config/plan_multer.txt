// ==> CONCEPTs USED in MULTER
// 1. enctype = 'multipart/form-data'
// 2. multer: adds files in req.file OR req.files object. 
// 3. create config_folder => multer.js file -> 
//    import multer, 
//    setup multer(diskstorage):- set destination & filename & use crypto.randomBytes(12, function() {})
// 4. create upload variable
// 5. module.exports = upload;
// 6. Middleware:- upload.single('picture');


// ==> LEARNINGs:
// 1Q. userModel -> profileImage:- type:String  why?
// ans: because profileImage contains 'name_of_image' not image.
//
// 2Q. What is crypto?
// ans: crypto is an inbuilt node js module, we can import this module directly and we can use it. 
//      crypto has a method randomBytes(), which takes bite as input(e.g 12) and generates a random string_buffer.
//      crypto.randomBytes(12, function(err, bytes){
//         console.log(bytes);                        // <Buffer cc c1 a7 b7 c7 d3 d2 f1 h4 b2 h1 j3>
//         console.log(bytes.toString('hex'));        // ab3g5hei4jvb5nvd3n8as0kl3
//      });
// Buffer: A Buffer is essentially an array of raw binary data. Each element in the buffer is an 8-bit integer, and you can think of it like an array of bytes.
// 'hex' Encoding: The 'hex' encoding specifies that the binary data should be represented as a hexadecimal string. Hexadecimal is a base-16 number system, using the digits 0-9 and the letters a-f. Each byte (8 bits) of binary data is represented by two hexadecimal characters.





// ==> CODE of MULTER
const multer = require('multer');
const path = require('path');
// => Set up storage engine for multer
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, './public/images/uploads')
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9) + path.extname(file.originalname);
        cb(null, file.fieldname + '-' + uniqueSuffix)
    }
})
// =>Initialize upload variable with storage configuration
const upload = multer({ storage: storage })


// ----------------Routes----------------
app.get('/test', function (req, res, next) {
    res.render('test_multer');
});
app.post('/upload', upload.single('image') ,function (req, res) {

    // update users profileImage: with new image filename
    const user = await userModel.findOne({});
    user.profileImage = req.file.filename;

    res.redirect('/');
})

