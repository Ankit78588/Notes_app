// ✅ npm init -y 
// ✅ npm i express | nodemon | ejs | mongoose | bcrypt | jsonwebtoken | cookie-parser | body-parser
// ✅ setup       

// 1.
// ✅ users.js FILE :- import mongoose | connect | create schema | create model | export model
//     post.js FILE :- 

// 2.
// ✅ views FOLDER | public FOLDER 
// ✅ login.ejs | signup.ejs
// ✅ Routes:  Get:  /  /login  /signup
//            Post:     /login  /signup

// 3. 
// jwt.js FILE :- generateToken() | verifyTokenMiddleware()   



// UNDERSTANDING populate('posts')
// CODE:
// app.get('/', verifyTokenMiddleware, async function (req, res) {
//     const user = await userModel.findOne({username: req.userPayload.email}).populate('posts');
//     res.render('profile', {user});
// });

// EXPLANATION:
// Here, populate('posts') means that Mongoose will replace the posts field in the user document with the actual
// documents from the posts collection that are referenced by the posts field.
// In the user schema, the posts field is an array of ObjectId references to documents in the Post collection. 
// When you use populate('posts'), Mongoose will fetch the documents from the Post collection that match the 
// ObjectIds in the posts array and include them in the user document. This means that after populate is called,
// the user document will have the posts field populated with actual Post documents instead of just their 
// ObjectId references.





app.get('/', verifyTokenMiddleware, async function (req, res) {
    const user = await userModel.findOne({username: req.userPayload.email}).populate('posts');
    res.render('profile', {user});
});




// JOB - like post // 1.find post     2.update likes array - with user Id       3.redirect('/profile')



// LEARNING
// 1. /like/id  /edit/id
// 2. splice(i,1) -> to remove elements from Array
// 2. Multer -> for uploading files
// 3. memoryStorage :- for uploading in DB
//    diskStorage   :- for uploading on server


